services:
  mysql:
    image: mysql:8
    container_name: sa_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: sa_management_3afak
      MYSQL_USER: sa_user
      MYSQL_PASSWORD: sa_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-config:/etc/mysql/conf.d
    networks:
      - sa_network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$$MYSQL_ROOT_PASSWORD || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=100
      --innodb-flush-log-at-trx-commit=2
      --innodb-flush-method=O_DIRECT
      --bind-address=0.0.0.0

  backend:
    build:
      context: ./sa-management
      dockerfile: Dockerfile
    container_name: sa_backend
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./sa-management:/var/www/html
      - backend_cache:/var/www/html/storage/framework/cache
      - backend_sessions:/var/www/html/storage/framework/sessions
    ports:
      - "0.0.0.0:8000:8000"
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=mysql
      - DB_DATABASE=sa_management_3afak
      - DB_USERNAME=sa_user
      - DB_PASSWORD=sa_password
      - APP_URL=http://192.168.1.45:8000
      - FRONTEND_URL=http://192.168.1.45:3001
      - CORS_ALLOWED_ORIGINS=http://192.168.1.45:3001,http://127.0.0.1:3001
      - SANCTUM_STATEFUL_DOMAINS=192.168.1.45:3001,127.0.0.1:3001
      - SESSION_DOMAIN=192.168.1.45
      - SESSION_SECURE_COOKIE=false
      - SESSION_SAME_SITE=lax
      - MAIL_MAILER=smtp
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USERNAME=aminatitoua342@gmail.com
      - MAIL_PASSWORD=uyohfhnnyubypanv
      - MAIL_ENCRYPTION=tls
      - MAIL_FROM_ADDRESS=aminatitoua342@gmail.com
      - MAIL_EHLO_DOMAIN=192.168.1.45
      - CACHE_DRIVER=file
      - SESSION_DRIVER=database
      - QUEUE_CONNECTION=database
      - DB_CONNECTION=mysql
      - LOG_CHANNEL=stack
      - LOG_LEVEL=debug
      - PHP_MEMORY_LIMIT=512M
      - PHP_MAX_EXECUTION_TIME=120
      - PHP_MAX_INPUT_TIME=120
      - PHP_POST_MAX_SIZE=50M
      - PHP_UPLOAD_MAX_FILESIZE=50M
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - sa_network
    # ✅ HEALTHCHECK AJOUTÉ
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8000/api/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      bash -c "
        set -e
        
        echo '=== Starting Backend Setup ===' &&
        
        echo '[1/10] Waiting for MySQL to be ready...' &&
        for i in {1..30}; do
          if mysqladmin ping -h mysql -u sa_user -psa_password --silent 2>/dev/null; then
            echo 'MySQL is ready!' && break
          fi
          echo \"Attempt $$i/30: MySQL not ready yet...\" && sleep 2
        done &&
        
        echo '[2/10] Installing Composer dependencies...' &&
        if [ ! -d 'vendor' ] || [ ! -f 'vendor/autoload.php' ]; then
          composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist || exit 1
        else
          echo 'Vendor already exists, skipping composer install'
        fi &&
        
        echo '[3/10] Setting up .env file...' &&
        if [ ! -f '.env' ]; then
          cp .env.example .env || exit 1
        fi &&
        
        echo '[4/10] Generating application key...' &&
        if ! grep -q 'APP_KEY=base64:' .env || [ -z \"$$(grep APP_KEY .env | cut -d '=' -f2)\" ]; then
          php artisan key:generate --force || exit 1
        else
          echo 'APP_KEY already exists'
        fi &&
        
        echo '[5/10] Creating storage directories...' &&
        mkdir -p storage/logs storage/framework/cache/data storage/framework/sessions storage/framework/views storage/app/public bootstrap/cache &&
        
        echo '[6/10] Setting permissions...' &&
        chmod -R 775 storage bootstrap/cache &&
        chown -R www-data:www-data storage bootstrap/cache 2>/dev/null || echo 'Warning: Could not change ownership (running as non-root)' &&
        
        echo '[7/10] Optimizing autoloader...' &&
        composer dump-autoload --optimize &&
        
        echo '[8/10] Running database migrations...' &&
        php artisan migrate --force 2>&1 | tee /tmp/migration.log &&
        if grep -qi 'error\|exception\|fail' /tmp/migration.log; then
          echo 'Warning: Migration may have failed, check logs'
        fi &&
        
        echo '[9/10] Clearing caches...' &&
        php artisan config:clear &&
        php artisan cache:clear &&
        php artisan view:clear &&
        php artisan route:clear &&
        
        echo '[10/10] Creating storage symlink...' &&
        php artisan storage:link 2>/dev/null || echo 'Storage link already exists' &&
        
        echo '=== Starting Laravel Server ===' &&
        php artisan serve --host=0.0.0.0 --port=8000
      "

  frontend:
    image: node:20-alpine
    container_name: sa_frontend
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./sa-management-frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_build_cache:/app/.cache
    ports:
      - "0.0.0.0:3001:3001"
    environment:
      - REACT_APP_API_URL=http://192.168.1.45:8000/api
      - REACT_APP_BASE_URL=http://192.168.1.45:3001
      - HOST=0.0.0.0
      - PORT=3001
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
      - DISABLE_ESLINT_PLUGIN=true
      - GENERATE_SOURCEMAP=false
      - NODE_ENV=development
      - NODE_OPTIONS=--max-old-space-size=4096
      - SKIP_PREFLIGHT_CHECK=true
      - REACT_APP_API_TIMEOUT=15000
      - REACT_APP_RETRY_ATTEMPTS=3
      - WDS_SOCKET_HOST=0.0.0.0
      - WDS_SOCKET_PORT=3001
    networks:
      - sa_network
    depends_on:
      backend:
        condition: service_healthy  # ✅ Attend que backend soit healthy
    command: >
      sh -c "
        echo 'Starting frontend setup...' &&
        npm cache clean --force &&
        
        if [ -f 'package-lock.json' ]; then
          npm ci --no-audit --no-fund --prefer-offline || npm install --no-audit --no-fund
        else
          npm install --no-audit --no-fund
        fi &&
        
        echo 'Starting React development server...' &&
        REACT_APP_API_URL=http://192.168.1.45:8000/api HOST=0.0.0.0 npm start
      "
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

volumes:
  mysql_data:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_build_cache:
    driver: local
  backend_cache:
    driver: local
  backend_sessions:
    driver: local

networks:
  sa_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16