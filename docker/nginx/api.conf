# /etc/nginx/conf.d/api.conf
# Configuration du cache proxy pour les API

# Définition du cache path avec zone mémoire de 100MB et stockage de 1GB
proxy_cache_path /var/cache/nginx/api
    levels=1:2
    keys_zone=api_cache:100m
    max_size=1g
    inactive=24h
    use_temp_path=off;

# Map pour définir les conditions de bypass du cache
map $request_method$http_authorization$http_cookie$arg_nocache $bypass_cache {
    default 0;
    # Bypass si méthode POST/PUT/DELETE
    ~^(POST|PUT|DELETE|PATCH) 1;
    # Bypass si header Authorization présent
    ~.*Bearer.* 1;
    # Bypass si cookies présents
    ~.*[^$].* 1;
    # Bypass si paramètre nocache=1
    ~.*1$ 1;
}

# Map pour définir les durées de cache selon le code de réponse
map $upstream_status $cache_duration {
    default 1m;          # Par défaut 1 minute
    200 10m;             # Succès: 10 minutes
    201 5m;              # Créé: 5 minutes
    204 5m;              # No Content: 5 minutes
    301 1h;              # Redirection permanente: 1 heure
    302 10m;             # Redirection temporaire: 10 minutes
    304 1h;              # Not Modified: 1 heure
    404 1m;              # Not Found: 1 minute
    429 30s;             # Rate Limit: 30 secondes
    500 30s;             # Erreur serveur: 30 secondes
    502 30s;             # Bad Gateway: 30 secondes
    503 30s;             # Service Unavailable: 30 secondes
    504 30s;             # Gateway Timeout: 30 secondes
}

# Map pour définir les clés de cache personnalisées
map $request_uri $cache_key {
    default "$scheme$request_method$host$request_uri";
    ~^/api/dictionary/all$ "dict_all_v1";
    ~^/api/upas/campagnes\?status=active$ "campagnes_active_v1";
    ~^/api/upas/stats\?range=today$ "stats_today_v1";
}

server {
    listen 80;
    server_name 192.168.1.45;
    
    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Frontend React App (sans cache)
    location / {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;
    }

    # Backend Laravel API avec cache intelligent
    location /api {
        # Configuration du cache
        proxy_cache api_cache;
        proxy_cache_key $cache_key;
        proxy_cache_valid 200 302 $cache_duration;
        proxy_cache_valid 404 500 502 503 504 1m;
        
        # Bypass conditions
        proxy_cache_bypass $bypass_cache;
        proxy_no_cache $bypass_cache;
        
        # Configuration stale (réponse périmée en cas d'erreur)
        proxy_cache_use_stale error timeout invalid_header updating
                             http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_lock_timeout 5s;
        
        # Headers pour le debug
        add_header X-Cache $upstream_cache_status always;
        add_header X-Cache-Key $cache_key always;
        add_header X-Cache-Duration $cache_duration always;
        
        # Configuration du proxy vers le backend
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts optimisés
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering pour les performances
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        proxy_busy_buffers_size 16k;
        
        # CORS headers (uniquement si pas en cache)
        add_header Access-Control-Allow-Origin "http://192.168.1.45:3000" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;

        # Handle preflight requests (pas de cache pour OPTIONS)
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "http://192.168.1.45:3000";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With";
            add_header Access-Control-Allow-Credentials true;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # Location spéciale pour vider le cache (utile pour le debug)
    location /api/cache/purge {
        allow 172.20.0.0/16;  # Seulement depuis le réseau Docker
        deny all;
        
        proxy_cache_purge api_cache $cache_key;
        add_header X-Cache-Purge "OK" always;
        add_header Content-Type "text/plain" always;
        return 200 "Cache purged for key: $cache_key\n";
    }

    # Static files pour Laravel (avec cache long)
    location /storage {
        proxy_cache api_cache;
        proxy_cache_valid 200 1h;
        proxy_cache_use_stale error timeout updating;
        
        proxy_pass http://backend:8000/storage;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        add_header X-Cache $upstream_cache_status always;
    }

    # WebSocket pour React Hot Reload (pas de cache)
    location /ws {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Logs
    access_log /var/log/nginx/sa_access.log;
    error_log /var/log/nginx/sa_error.log;
}